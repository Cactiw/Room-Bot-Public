from work_materials.globals import *
import datetime
import time
import logging
import work_materials.globals as globals

from bin.class_func import rangers_notify_start



def battle_stats_send(bot, update = None):
    if update is not None:
        chat_id = update.message.chat_id
    else:
        chat_id = -372516164
    d = datetime.datetime(2018, 5, 27, 7, 0, 0, 0)  # 8 –¥–ª—è –ª–µ—Ç–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    c = datetime.datetime(2018, 5, 26, 23, 0, 0, 0)
    c = d - c
    a = datetime.datetime.now()
    a = a - d
    battle_id = -1 # –ó–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –±–∏—Ç–≤—É
    while a > c:
        a = a - c
        battle_id = battle_id + 1
    print(battle_id)
    request = "SELECT user_id, report_attack, report_defense, report_lvl, report_exp, " \
              "report_gold, report_stock, critical_strike, guardian_angel, additional_attack, additional_defense " \
              "FROM reports WHERE battle_id = '{0}' ORDER BY report_lvl DESC".format(battle_id)
    cursor.execute(request)
    row = cursor.fetchone()
    if row is None:
        bot.send_message(chat_id = chat_id, text = "–Ø –Ω–µ –Ω–∞—à—ë–ª —Ä–µ–ø–æ—Ä—Ç—ã –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –±–∏—Ç–≤—É. –í—ã –∏—Ö –∫–∏–¥–∞–ª–∏? –í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å–±–∏–ª–æ—Å—å –≤—Ä–µ–º—è")  # GH: -1001381505036 #Test: -1001468891144
        return
    response = "–û—Ç—á—ë—Ç –ø–æ –æ—Ç—Ä—è–¥—É –∑–∞ –±–∏—Ç–≤—É, –ø—Ä–æ—à–µ–¥—à—É—é 8 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥:\n\n"
    total_attack = 0
    additional_attack = 0
    additional_defense = 0
    total_defense = 0
    critical_strikes = 0
    guardian_angels = 0
    i = 1
    while row:
        request = "SELECT user_castle, username FROM users WHERE user_id = '{0}' and (guild = 'KYS' or guild = '–°–ö–ò')".format(row[0])
        cursor_2.execute(request)
        user = cursor_2.fetchone()
        if user is None:
            row = cursor.fetchone()
            continue
        response_new = "<b>" + str(i) + "</b>. " + user[0] + "<b>" + user[1] + "</b>\nüèÖ:" + str(row[3]) + ' ‚öî:' + str(row[1])
        if row[7] and row[9] > 0:
            response_new += "(+{0})".format(row[9])
        response_new +=' üõ°:'
        response_add = ""
        if row[8] or (row[7] and row[10] > 0):
            response_add += "(+{0})".format(row[10])
        response_new += str(row[2])  + response_add + '\n' + ' üî•:' + str(row[4]) + ' üí∞:' + str(row[5]) + ' üì¶:' + str(row[6]) + '\n'
        total_attack += row[1]
        total_defense += row[2]

        if row[7] and row[9] > 0:
            response_new += '<b>‚ö°Ô∏èCritical strike</b>\n'
            critical_strikes += 1
            additional_attack += row[9]
        elif row[7] and row[10] > 0:
            response_new += '<b>‚ö°Ô∏èÔ∏èLucky Defender!</b>\n'
            critical_strikes += 1
            additional_defense += row[10]
        if row[8]:
            response_new += '<b>üî±Guardian angel</b>\n'
            guardian_angels += 1
            additional_defense += row[10]
        response_new += "\n\n"
        if len(response + response_new) >= 4096:  # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.send_message(chat_id=chat_id, text=response, parse_mode='HTML')
            response = ""
        response += response_new
        row = cursor.fetchone()
        i += 1

    response_new = "\n\nüëÅ‚Äçüó®Total people counted: <b>" + str(i - 1) + "</b>\n"
    response_new += "‚öîTotal attack: <b>" + str(total_attack) + "</b>\n"
    response_new += "üõ°Total defense: <b>" + str(total_defense) + "</b>\n"
    if critical_strikes > 0:
        response_new += "‚ö°Ô∏èCritical strikes: <b>" + str(critical_strikes) + "</b>\n"
        response_new += "üó°–ê—Ç–∞–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ —Å –∫—Ä–∏—Ç–æ–≤: <b>" + str(additional_attack) + "</b>\n"
    if guardian_angels > 0:
        response_new += "üî±Guardian angels: <b>" + str(guardian_angels) + "</b>\n"
    if additional_defense > 0:
        response_new += "üõ°–ó–∞—â–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω–æ —Å –∞–Ω–≥–µ–ª–∞ –∏–ª–∏ –∫—Ä–∏—Ç–æ–≤: <b>" + str(additional_defense) + "</b>\n"


    if len(response + response_new) >= 4096:  # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(chat_id=chat_id, text=response, parse_mode='HTML')
        response = ""
    response += response_new
    bot.send_message(chat_id=chat_id, text=response, parse_mode='HTML')


    #üèÖ:' + str(row[4]) + ' ‚öî:' + str(row[2]) + ' üõ°:' + str(row[3]) + ' üî•:' + str(row[5]) + ' üí∞:' + str(row[6]) + ' üì¶:' + str(row[7])
    #if row[8]:
    #    response_new += '<b>\n‚ö°Ô∏èCritical strike</b>'
    #if row[9]:
    #    response_new += '<b>\nüî±Guardian angel</b>'

    pass



def add_silent(bot, update):
    mes = update.message
    request = "INSERT INTO silent(chat_id, chat_name) VALUES('{0}', '{1}')".format(mes.chat_id, mes.chat.title)
    cursor.execute(request)
    conn.commit()
    bot.send_message(chat_id=update.message.chat_id, text='–ë–µ—Å–µ–¥–∞ —É—Å–ø–µ—à–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Ç–∏—à–∏–Ω–µ')


def silent_end(bot, job_queue):
    globals.silent_delete = False
    logging.info("ending silent in chats".format(globals.silent_chats))
    for chat_id in globals.silent_chats:
        try:
            bot.send_message(chat_id = chat_id, text = "–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã –æ—Ç–º–µ–Ω—ë–Ω!")
        except TelegramError:
            pass
    silent_start(bot, admin_ids[0], None)
    g_attacking_users.clear()
    g_defending_users.clear()
    reports_count.clear()
    globals.g_added_attack = 0
    globals.g_added_defense = 0
    battle_stats_send(bot)

def silent_clear_start(bot, job_queue):
    request = "SELECT COUNT(1) FROM silent where enabled = 1"
    cursor.execute(request)
    row = cursor.fetchone()
    print(row[0])
    print("started successful")
    request = "SELECT chat_id FROM silent WHERE enabled = 1"
    cursor.execute(request)
    row = cursor.fetchone()
    globals.silent_chats.clear()
    while row:
        bot.send_message(chat_id=row[0],
                         text="–ß–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –ø—Ä–∏–∫–∞–∑–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤, –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        globals.silent_chats.append(row[0])
        row = cursor.fetchone()
    time_to_start = datetime.timedelta(minutes = 2)
    #--------------------------------------------------------------------------------       # TEST ONLY

    #time_to_start = datetime.timedelta(seconds = 1)

    #--------------------------------------------------------------------------------
    job.run_once(silent_start_delete, time_to_start)


def silent_start_delete(bot, job_queue):
    globals.silent_delete = True
    minute = datetime.timedelta(minutes = 1)
    job.run_once(silent_end, minute)
    logging.info("running silent in chats {0}".format(globals.silent_chats))


def silent_setup(bot, update, job_queue):
    global silent_running
    request = "SELECT * FROM silent"
    cursor.execute(request)
    row = cursor.fetchone()
    response = "Currently silent status: " + str(silent_running)
    if silent_running:
        response = response + "\ndisable: /silent_stop"
    else:
        response = response + "\nenable: /silent_start"
    response = response + "\nCurrently existing silent chats:\n"
    while row:
        response = response + '\n' + str(row[0]) + ': ' + row[2] + ', chat_id = ' + str(row[1]) + ', enabled = ' + str(row[3])
        if row[3]:
            response = response + "\ndisable - /sil_run_{0}_0".format(row[0])
        else:
            response = response + "\nenable - /sil_run_{0}_1".format(row[0])
        row = cursor.fetchone()
    bot.send_message(chat_id=update.message.chat_id, text=response)

def silent_start(bot, update, job_queue):
    global job_silence
    global silent_running
    print("Starting...")
    try:
        chat_id = update.message.chat_id
    except AttributeError:
        try:
            chat_id = int(update)
        except TypeError:
            return
    zero = datetime.timedelta(hours = 0)

    now = datetime.datetime.now(tz=pytz.timezone('Europe/Moscow')).replace(
        tzinfo=None) - datetime.datetime.combine(datetime.datetime.now().date(), datetime.time(hour=0))
    if now < datetime.timedelta(hours=1):
        remaining_time = datetime.timedelta(hours=1) - now
    else:
        time_from_battle = now - datetime.timedelta(hours=1)
        while time_from_battle > datetime.timedelta(hours=8):
            time_from_battle -= datetime.timedelta(hours=8)
        remaining_time = datetime.timedelta(hours=8) - time_from_battle


    a = remaining_time - datetime.timedelta(minutes=3)# –ß—Ç–æ–±—ã —Ç–∏—à–∏–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ 57 –º–∏–Ω—É—Ç, –∞ –Ω–µ —Ä–æ–≤–Ω–æ
    print(a)
    if (a < zero):
        print("ERROR", a)
        bot.send_message(chat_id=chat_id, text="–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –ø—Ä–µ—Ä—ã–≤–∞—é. –ü–æ–ª—É—á–µ–Ω–æ {0}".format(a))
        return 1

    #----------------------------------------------------------------------------------------------     TEST ONLY

    #a = datetime.timedelta(seconds = 10)

    #______________________________________________________________________________________________

    job_silence = job.run_once(silent_clear_start, a)
    silent_running = 1
    print("OK")
    bot.send_message(chat_id=chat_id, text="–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ—Å—Ç–∞–ª–æ—Å—å {0}".format(a))
    rangers_notify_start(bot, update, remaining_time)


def silent_delete_message(bot, update):
    mes = update.message
    if update.message.from_user.id not in get_admin_ids(bot, update.message.chat_id):
        try:
            bot.deleteMessage(chat_id = mes.chat_id, message_id = mes.message_id)
        except TelegramError:
            pass


def silent_stop(bot, update, job_queue):
    global job_silence
    job_silence.schedule_removal()
    globals.silent_running = False
    globals.silent_delete = False
    bot.send_message(chat_id=update.message.chat_id, text='–¢–∏—à–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')


def sil_run(bot, update):
    mes = update.message
    mes1 = mes.text.split("_")
    request = "SELECT * FROM silent WHERE silent_id = '{0}'".format(mes1[2])
    cursor.execute(request)
    row = cursor.fetchone()
    if row == None:
        bot.send_message(chat_id=update.message.chat_id, text='–û—à–∏–±–∫–∞. –¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return
    request = "UPDATE silent SET enabled = '{0}' WHERE silent_id = '{1}'".format(mes1[3], mes1[2])
    cursor.execute(request)
    conn.commit()
    bot.send_message(chat_id=update.message.chat_id, text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ')